# ==========================================
# STAGE 1: Build Stage
# ==========================================
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files
COPY package*.json ./

# Install dependencies (production + dev for building)
# Using --legacy-peer-deps to resolve React 19 peer dependency conflicts
RUN npm ci --include=dev --legacy-peer-deps

# Copy application source
COPY . .

# Build arguments for environment variables
ARG VITE_API_BASE_URL
ARG VITE_WIDGET_CDN_URL
ARG VITE_ENV=production

# Set environment variables for build
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_WIDGET_CDN_URL=${VITE_WIDGET_CDN_URL}
ENV VITE_ENV=${VITE_ENV}

# Build application
RUN npm run build

# ==========================================
# STAGE 2: Production Stage with Nginx
# ==========================================
FROM nginx:1.25-alpine AS production

# Install necessary packages
RUN apk add --no-cache curl

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf
COPY nginx.default.conf /etc/nginx/conf.d/default.conf

# Copy built files from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy startup script
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Add non-root user for security (nginx user already exists with uid/gid 101 in nginx:alpine)
# We'll just use the existing nginx user

# Set proper permissions (using existing nginx user)
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Create pid file directory
RUN mkdir -p /var/run && \
    chown -R nginx:nginx /var/run

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Expose port
EXPOSE 80

# Use non-root user (nginx user from base image)
USER nginx

# Start nginx
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]
