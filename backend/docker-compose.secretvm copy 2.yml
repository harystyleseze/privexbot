# SecretVM Production Deployment with Traefik
# Usage: Upload this file to /mnt/secure/docker_wd/ as docker-compose.yml
# Then: docker compose up -d
#
# Network: harystyles.store (67.43.239.18)
# Subdomains:
#   - api.harystyles.store      (Backend API)
#   - pgadmin.harystyles.store  (PgAdmin)
#   - redis-ui.harystyles.store (Redis Commander)
#   - traefik.harystyles.store  (Traefik Dashboard)

services:
  backend:
    image: harystyles/privexbot-backend@sha256:bc5cd3a5c8ae2aa2c0a67f4e5aec4bcd7fb8c63b4e25a3889639d8d6b8c842de
    container_name: privexbot-backend-secretvm
    # NOTE: DATABASE_URL is read from .env file, not set here
    # This allows Python to read the complete URL with hard-coded password
    env_file:
      - usr/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - traefik
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - python
        - -c
        - import urllib.request;
          urllib.request.urlopen('http://localhost:8000/health')
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.harystyles.store`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls=true
      - traefik.http.services.api.loadbalancer.server.port=8000
      - traefik.docker.network=traefik
  postgres:
    image: postgres:16-alpine
    container_name: privexbot-postgres-secretvm
    environment:
      - POSTGRES_USER=privexbot
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=privexbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - traefik
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U privexbot -d privexbot
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - usr/.env
  redis:
    image: redis:7-alpine
    container_name: privexbot-redis-secretvm
    volumes:
      - redis_data:/data
    networks:
      - traefik
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 10s
      timeout: 3s
      retries: 5
    env_file:
      - usr/.env
  pgadmin:
    image: dpage/pgadmin4:8.11
    container_name: privexbot-pgadmin-secretvm
    user: root
    environment:
      - PGADMIN_DEFAULT_EMAIL=privexbot@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_LISTEN_PORT=80
      - PGADMIN_CONFIG_PROXY_X_FOR_COUNT=1
      - PGADMIN_CONFIG_PROXY_X_PROTO_COUNT=1
      - PGADMIN_CONFIG_PROXY_X_HOST_COUNT=1
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=False
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - traefik
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - wget
        - -O
        - "-"
        - http://localhost:80/misc/ping
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.harystyles.store`)
      - traefik.http.routers.pgadmin.entrypoints=websecure
      - traefik.http.routers.pgadmin.tls=true
      - traefik.http.services.pgadmin.loadbalancer.server.port=80
      - traefik.docker.network=traefik
    env_file:
      - usr/.env
  redis-ui:
    image: rediscommander/redis-commander:latest
    container_name: privexbot-redis-ui-secretvm
    environment:
      - REDIS_HOSTS=local:redis:6379
    env_file:
      - usr/.env
    depends_on:
      - redis
    networks:
      - traefik
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.redisui.rule=Host(`redis-ui.harystyles.store`)
      - traefik.http.routers.redisui.entrypoints=websecure
      - traefik.http.routers.redisui.tls=true
      - traefik.http.services.redisui.loadbalancer.server.port=8081
      - traefik.docker.network=traefik
  traefik:
    image: traefik:v2.10
    container_name: traefik-secretvm
    command:
      - --api=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.options=default@file
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /mnt/secure/cert:/certs:ro
    networks:
      - traefik
    restart: unless-stopped
    configs:
      - source: tls_config
        target: /etc/traefik/dynamic/tls.yml
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.harystyles.store`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.service=api@internal
      - traefik.docker.network=traefik
    env_file:
      - usr/.env
  # Celery worker - Uncomment when implementing background tasks
  # celery-worker:
  #   image: harystyles/privexbot-backend@sha256:9fb3b1d1152e5965f8b0c22a7cc9f317a6564edae257bc208a8c9516e330608b
  #   container_name: privexbot-celery-secretvm
  #   command: celery -A src.app.tasks.celery_worker worker --loglevel=info
  #   environment:
  #     - DATABASE_URL=postgresql://privexbot:${POSTGRES_PASSWORD}@postgres:5432/privexbot
  #     - REDIS_URL=redis://redis:6379/0
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - traefik
  #   restart: unless-stopped

volumes:
  postgres_data: null
  redis_data: null
  pgadmin_data: null
networks:
  traefik:
    driver: bridge
configs:
  tls_config:
    content: |-
      tls:
        certificates:
          - certFile: /certs/secret_vm_fullchain.pem
            keyFile: /certs/secret_vm_private.pem
        stores:
          default:
            defaultCertificate:
              certFile: /certs/secret_vm_fullchain.pem
              keyFile: /certs/secret_vm_private.pem
