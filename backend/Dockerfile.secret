# ---- Stage 1: Build / install dependencies ----
FROM python:3.11-slim AS builder

WORKDIR /app

# Install uv for dependency resolution (like Poetry but faster)
RUN pip install --no-cache-dir uv

# Copy only dependency files to cache dependencies
COPY pyproject.toml ./
COPY uv.lock ./  # Optional, for lockfile reproducibility

# Install dependencies into the image (system-wide)
RUN uv pip install --system -r pyproject.toml

# ---- Stage 2: Final image ----
FROM python:3.11-slim

# Add non-root user for security
RUN useradd -m appuser

WORKDIR /app

# Install system libraries (psycopg2 needs libpq)
RUN apt-get update && apt-get install -y libpq5 curl \
    && rm -rf /var/lib/apt/lists/*

# Copy dependencies from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Install production WSGI server
RUN pip install --no-cache-dir gunicorn uvicorn[standard]

# Copy app source code
COPY ./src /app/src

# Set environment vars
ENV PYTHONPATH=/app/src

# Healthcheck to FastAPI /health route
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl --fail http://localhost:8000/health || exit 1

# Run as non-root
USER appuser

# Expose FastAPI port
EXPOSE 8000

# Start the FastAPI app using Gunicorn + Uvicorn workers
CMD ["gunicorn", "src.app.main:app", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--bind", "0.0.0.0:8000", \
     "--access-logfile", "-", \
     "--error-logfile", "-"]
