{"openapi":"3.1.0","info":{"title":"PrivexBot-Dev","description":"Privacy-First AI Chatbot Builder API","version":"0.1.0"},"paths":{"/api/v1/auth/me":{"get":{"tags":["authentication","authentication"],"summary":"Get Current User Profile","description":"Get current authenticated user's profile.\n\nWHY: Allow frontend to fetch user details after login\nHOW: Extract user from JWT token, load auth methods from DB\n\nFlow:\n1. JWT token validated by get_current_user dependency\n2. Load user's authentication methods from database\n3. Return UserProfile with all linked auth methods\n\nArgs:\n    current_user: Authenticated user (from JWT token)\n    db: Database session (injected)\n\nReturns:\n    UserProfile with user data and linked auth methods\n\nRaises:\n    HTTPException(401): Invalid or missing JWT token (from dependency)\n\nExample Response:\n    {\n        \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"username\": \"alice_wonderland\",\n        \"is_active\": true,\n        \"created_at\": \"2024-01-15T10:30:00Z\",\n        \"updated_at\": \"2024-01-15T10:30:00Z\",\n        \"auth_methods\": [\n            {\n                \"provider\": \"email\",\n                \"provider_id\": \"alice@example.com\",\n                \"linked_at\": \"2024-01-15T10:30:00Z\"\n            }\n        ]\n    }","operationId":"get_current_user_profile_api_v1_auth_me_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserProfile"}}}}},"security":[{"HTTPBearer":[]}]}},"/api/v1/auth/email/signup":{"post":{"tags":["authentication","authentication"],"summary":"Email Signup","description":"Register a new user with email and password.\n\nWHY: Allow users to create account with traditional credentials\nHOW: Validate input, create user, return JWT token\n\nFlow:\n1. Validate email format and password strength\n2. Check if email already registered\n3. Hash password with bcrypt\n4. Create User and AuthIdentity records\n5. Generate JWT token\n6. Return token for immediate login\n\nArgs:\n    request: EmailSignupRequest with username, email, password\n    db: Database session (injected)\n\nReturns:\n    Token with access_token and expiration\n\nRaises:\n    HTTPException(400): Email already registered or weak password\n    HTTPException(400): Username already taken","operationId":"email_signup_api_v1_auth_email_signup_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailSignupRequest"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Token"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/email/login":{"post":{"tags":["authentication","authentication"],"summary":"Email Login","description":"Login with email and password.\n\nWHY: Authenticate existing users with credentials\nHOW: Verify password hash, return JWT token\n\nFlow:\n1. Find user by email\n2. Verify password matches hash\n3. Check account is active\n4. Generate JWT token\n5. Return token for authenticated requests\n\nArgs:\n    request: EmailLoginRequest with email and password\n    db: Database session (injected)\n\nReturns:\n    Token with access_token and expiration\n\nRaises:\n    HTTPException(401): Invalid credentials or inactive account\n\nSecurity:\n- Same error for all failures (prevents user enumeration)\n- Bcrypt constant-time comparison (prevents timing attacks)","operationId":"email_login_api_v1_auth_email_login_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailLoginRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Token"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/email/change-password":{"post":{"tags":["authentication","authentication"],"summary":"Change Password","description":"Change user's password (requires authentication).\n\nWHY: Allow users to update password securely\nHOW: Verify current password, validate new password, update hash\n\nFlow:\n1. Extract user from JWT token\n2. Verify current password\n3. Validate new password strength\n4. Update password hash\n5. Return success message\n\nArgs:\n    request: ChangePasswordRequest with old and new passwords\n    current_user: Authenticated user (from JWT token)\n    db: Database session (injected)\n\nReturns:\n    Success message\n\nRaises:\n    HTTPException(400): No email auth method found\n    HTTPException(400): New password doesn't meet requirements\n    HTTPException(401): Current password incorrect\n\nSecurity:\n- Requires valid JWT token (prevents unauthorized changes)\n- Verifies old password (prevents takeover)\n- Enforces password strength (prevents weak passwords)","operationId":"change_password_api_v1_auth_email_change_password_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangePasswordRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":{"type":"string"},"type":"object","title":"Response Change Password Api V1 Auth Email Change Password Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/api/v1/auth/evm/challenge":{"post":{"tags":["authentication","authentication"],"summary":"Evm Challenge","description":"Generate challenge message for EVM wallet signature.\n\nWHY: Implement secure challenge-response authentication\nHOW: Generate nonce, store in Redis, return EIP-4361 message\n\nFlow:\n1. Validate Ethereum address format\n2. Generate cryptographically secure nonce\n3. Store nonce in Redis (5 min expiration)\n4. Create EIP-4361 compliant message\n5. Return message for user to sign in wallet\n\nArgs:\n    request: WalletChallengeRequest with address\n\nReturns:\n    WalletChallengeResponse with message to sign and nonce\n\nRaises:\n    HTTPException(400): Invalid address format\n\nSecurity:\n- Nonce expires in 5 minutes\n- Single-use nonce (deleted after verification)\n- EIP-4361 format prevents phishing","operationId":"evm_challenge_api_v1_auth_evm_challenge_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WalletChallengeRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WalletChallengeResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/evm/verify":{"post":{"tags":["authentication","authentication"],"summary":"Evm Verify","description":"Verify EVM wallet signature and authenticate user.\n\nWHY: Cryptographically prove wallet ownership without passwords\nHOW: Recover signer from signature, verify matches address\n\nFlow:\n1. Retrieve nonce from Redis (single-use)\n2. Verify nonce in signed message\n3. Recover signer address from signature\n4. Verify recovered address matches claimed address\n5. Find or create user\n6. Generate JWT token\n\nArgs:\n    request: WalletVerifyRequest with address, message, signature\n    db: Database session (injected)\n\nReturns:\n    Token with access_token and expiration\n\nRaises:\n    HTTPException(400): Nonce expired or invalid\n    HTTPException(401): Signature verification failed\n\nSecurity:\n- Nonce is single-use (prevents replay attacks)\n- ECDSA signature recovery proves private key ownership\n- No password needed - cryptographic proof","operationId":"evm_verify_api_v1_auth_evm_verify_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WalletVerifyRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Token"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/evm/link":{"post":{"tags":["authentication","authentication"],"summary":"Evm Link","description":"Link EVM wallet to existing user account (requires authentication).\n\nWHY: Allow users to add wallet auth to email-only accounts\nHOW: Verify signature, create new AuthIdentity for existing user\n\nFlow:\n1. Extract user from JWT token\n2. Verify wallet signature (same as /verify)\n3. Check wallet not already linked to another account\n4. Create AuthIdentity linking wallet to user\n5. Return success message\n\nArgs:\n    request: LinkWalletRequest with address, message, signature\n    current_user: Authenticated user (from JWT token)\n    db: Database session (injected)\n\nReturns:\n    Success message\n\nRaises:\n    HTTPException(400): Wallet already linked to another account\n    HTTPException(401): Signature verification failed\n\nUse Case:\n- User signed up with email, now wants to add MetaMask\n- User has multiple wallets, wants to link all to same account","operationId":"evm_link_api_v1_auth_evm_link_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LinkWalletRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":{"type":"string"},"type":"object","title":"Response Evm Link Api V1 Auth Evm Link Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/api/v1/auth/solana/challenge":{"post":{"tags":["authentication","authentication"],"summary":"Solana Challenge","description":"Generate challenge message for Solana wallet signature.\n\nWHY: Implement secure challenge-response authentication\nHOW: Generate nonce, store in Redis, return message to sign\n\nFlow:\n1. Validate Solana address format (base58, 32 bytes)\n2. Generate cryptographically secure nonce\n3. Store nonce in Redis (5 min expiration)\n4. Create message to sign\n5. Return message for user to sign in wallet\n\nArgs:\n    request: WalletChallengeRequest with address\n\nReturns:\n    WalletChallengeResponse with message to sign and nonce\n\nRaises:\n    HTTPException(400): Invalid address format\n\nSecurity:\n- Nonce expires in 5 minutes\n- Single-use nonce (deleted after verification)\n- Clear message format (no standard like EIP-4361 yet)","operationId":"solana_challenge_api_v1_auth_solana_challenge_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WalletChallengeRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WalletChallengeResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/solana/verify":{"post":{"tags":["authentication","authentication"],"summary":"Solana Verify","description":"Verify Solana wallet signature and authenticate user.\n\nWHY: Cryptographically prove wallet ownership using Ed25519\nHOW: Verify signature against public key from address\n\nFlow:\n1. Retrieve nonce from Redis (single-use)\n2. Verify nonce in signed message\n3. Decode signature and address from base58\n4. Verify Ed25519 signature\n5. Find or create user\n6. Generate JWT token\n\nArgs:\n    request: WalletVerifyRequest with address, message, signature\n    db: Database session (injected)\n\nReturns:\n    Token with access_token and expiration\n\nRaises:\n    HTTPException(400): Nonce expired or invalid\n    HTTPException(401): Signature verification failed\n\nSecurity:\n- Nonce is single-use (prevents replay attacks)\n- Ed25519 signature verification proves private key ownership\n- Solana address IS the public key","operationId":"solana_verify_api_v1_auth_solana_verify_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WalletVerifyRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Token"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/solana/link":{"post":{"tags":["authentication","authentication"],"summary":"Solana Link","description":"Link Solana wallet to existing user account (requires authentication).\n\nWHY: Allow users to add Solana wallet auth to existing accounts\nHOW: Verify signature, create new AuthIdentity for existing user\n\nFlow:\n1. Extract user from JWT token\n2. Verify wallet signature (same as /verify)\n3. Check wallet not already linked to another account\n4. Create AuthIdentity linking wallet to user\n5. Return success message\n\nArgs:\n    request: LinkWalletRequest with address, message, signature\n    current_user: Authenticated user (from JWT token)\n    db: Database session (injected)\n\nReturns:\n    Success message\n\nRaises:\n    HTTPException(400): Wallet already linked to another account\n    HTTPException(401): Signature verification failed\n\nUse Case:\n- User signed up with email, now wants to add Phantom wallet\n- User has multiple wallets, wants to link all to same account","operationId":"solana_link_api_v1_auth_solana_link_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LinkWalletRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":{"type":"string"},"type":"object","title":"Response Solana Link Api V1 Auth Solana Link Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/api/v1/auth/cosmos/challenge":{"post":{"tags":["authentication","authentication"],"summary":"Cosmos Challenge","description":"Generate challenge message for Cosmos wallet signature.\n\nWHY: Implement secure challenge-response authentication\nHOW: Generate nonce, store in Redis, return message to sign\n\nFlow:\n1. Validate Cosmos address format (bech32 encoding)\n2. Generate cryptographically secure nonce\n3. Store nonce in Redis (5 min expiration)\n4. Create message to sign\n5. Return message for user to sign in wallet\n\nArgs:\n    request: WalletChallengeRequest with address\n\nReturns:\n    WalletChallengeResponse with message to sign and nonce\n\nRaises:\n    HTTPException(400): Invalid address format\n\nSecurity:\n- Nonce expires in 5 minutes\n- Single-use nonce (deleted after verification)\n- Supports cosmos and secret networks","operationId":"cosmos_challenge_api_v1_auth_cosmos_challenge_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WalletChallengeRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WalletChallengeResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/cosmos/verify":{"post":{"tags":["authentication","authentication"],"summary":"Cosmos Verify","description":"Verify Cosmos wallet signature and authenticate user.\n\nWHY: Cryptographically prove wallet ownership using secp256k1\nHOW: Verify pubkey matches address, then verify signature\n\nFlow:\n1. Retrieve nonce from Redis (single-use)\n2. Verify nonce in signed message\n3. Decode signature and public key from base64\n4. Derive address from public key (verify it matches)\n5. Verify secp256k1 signature\n6. Find or create user\n7. Generate JWT token\n\nArgs:\n    request: CosmosWalletVerifyRequest with address, message, signature, public_key\n    db: Database session (injected)\n\nReturns:\n    Token with access_token and expiration\n\nRaises:\n    HTTPException(400): Nonce expired or invalid\n    HTTPException(400): Public key doesn't match address\n    HTTPException(401): Signature verification failed\n\nSecurity:\n- Nonce is single-use (prevents replay attacks)\n- Public key must derive to claimed address\n- secp256k1 signature verification proves ownership\n\nNote: Unlike EVM (which recovers pubkey from signature), Cosmos\nwallets provide the public key separately and we must verify it matches.","operationId":"cosmos_verify_api_v1_auth_cosmos_verify_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CosmosWalletVerifyRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Token"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/auth/cosmos/link":{"post":{"tags":["authentication","authentication"],"summary":"Cosmos Link","description":"Link Cosmos wallet to existing user account (requires authentication).\n\nWHY: Allow users to add Cosmos wallet auth to existing accounts\nHOW: Verify signature and pubkey, create new AuthIdentity for existing user\n\nFlow:\n1. Extract user from JWT token\n2. Verify wallet signature (same as /verify)\n3. Check wallet not already linked to another account\n4. Create AuthIdentity linking wallet to user\n5. Return success message\n\nArgs:\n    request: CosmosLinkWalletRequest with address, message, signature, public_key\n    current_user: Authenticated user (from JWT token)\n    db: Database session (injected)\n\nReturns:\n    Success message\n\nRaises:\n    HTTPException(400): Wallet already linked to another account\n    HTTPException(400): Public key doesn't match address\n    HTTPException(401): Signature verification failed\n\nUse Case:\n- User signed up with email, now wants to add Keplr wallet\n- User has wallets on multiple Cosmos chains, wants to link all","operationId":"cosmos_link_api_v1_auth_cosmos_link_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CosmosLinkWalletRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":{"type":"string"},"type":"object","title":"Response Cosmos Link Api V1 Auth Cosmos Link Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/api/v1/orgs/":{"get":{"tags":["organizations"],"summary":"List Organizations","description":"List user's organizations with their roles.\n\nReturns paginated list of organizations the user belongs to.","operationId":"list_organizations_api_v1_orgs__get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"page","in":"query","required":false,"schema":{"type":"integer","minimum":1,"default":1,"title":"Page"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","maximum":100,"minimum":1,"default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationList"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["organizations"],"summary":"Create New Organization","description":"Create a new organization.\n\nUser becomes the owner and a default workspace is created.","operationId":"create_new_organization_api_v1_orgs__post","security":[{"HTTPBearer":[]}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationCreate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/orgs/{org_id}":{"get":{"tags":["organizations"],"summary":"Get Organization Details","description":"Get detailed organization information.\n\nIncludes members and workspaces if user has access.","operationId":"get_organization_details_api_v1_orgs__org_id__get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationDetailed"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["organizations"],"summary":"Update Organization Details","description":"Update organization information.\n\nRequires admin or owner role.","operationId":"update_organization_details_api_v1_orgs__org_id__put","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["organizations"],"summary":"Delete Organization Endpoint","description":"Delete organization.\n\nRequires owner role. Cascades to all workspaces and memberships.","operationId":"delete_organization_endpoint_api_v1_orgs__org_id__delete","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/orgs/{org_id}/members":{"get":{"tags":["organizations"],"summary":"List Organization Members","description":"List all members of an organization.\n\nRequires organization membership.","operationId":"list_organization_members_api_v1_orgs__org_id__members_get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/OrganizationMemberResponse"},"title":"Response List Organization Members Api V1 Orgs  Org Id  Members Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["organizations"],"summary":"Add Organization Member Endpoint","description":"Add a member to the organization.\n\nRequires admin or owner role.","operationId":"add_organization_member_endpoint_api_v1_orgs__org_id__members_post","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationMemberCreate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationMemberResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/orgs/{org_id}/members/{member_id}":{"put":{"tags":["organizations"],"summary":"Update Organization Member Role Endpoint","description":"Update organization member's role.\n\nRequires admin or owner role. Only owners can promote to owner.","operationId":"update_organization_member_role_endpoint_api_v1_orgs__org_id__members__member_id__put","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"member_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Member Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationMemberUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationMemberResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["organizations"],"summary":"Remove Organization Member Endpoint","description":"Remove member from organization.\n\nRequires admin or owner role. Cannot remove last owner.","operationId":"remove_organization_member_endpoint_api_v1_orgs__org_id__members__member_id__delete","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"member_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Member Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/orgs/{org_id}/workspaces":{"get":{"tags":["workspaces"],"summary":"List Workspaces","description":"List workspaces in an organization.\n\nOrganization admins see all workspaces, members see only assigned workspaces.","operationId":"list_workspaces_api_v1_orgs__org_id__workspaces_get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"page","in":"query","required":false,"schema":{"type":"integer","minimum":1,"default":1,"title":"Page"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","maximum":100,"minimum":1,"default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceList"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["workspaces"],"summary":"Create New Workspace","description":"Create a new workspace in the organization.\n\nRequires admin or owner role in the organization.","operationId":"create_new_workspace_api_v1_orgs__org_id__workspaces_post","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceCreate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/orgs/{org_id}/workspaces/{workspace_id}":{"get":{"tags":["workspaces"],"summary":"Get Workspace Details","description":"Get detailed workspace information.\n\nIncludes members if user has workspace access.","operationId":"get_workspace_details_api_v1_orgs__org_id__workspaces__workspace_id__get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"workspace_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Workspace Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceDetailed"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["workspaces"],"summary":"Update Workspace Details","description":"Update workspace information.\n\nRequires workspace admin role or organization admin/owner.","operationId":"update_workspace_details_api_v1_orgs__org_id__workspaces__workspace_id__put","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"workspace_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Workspace Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["workspaces"],"summary":"Delete Workspace Endpoint","description":"Delete workspace.\n\nRequires workspace admin role or organization admin/owner.\nCannot delete default workspace.","operationId":"delete_workspace_endpoint_api_v1_orgs__org_id__workspaces__workspace_id__delete","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"workspace_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Workspace Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/orgs/{org_id}/workspaces/{workspace_id}/members":{"get":{"tags":["workspaces"],"summary":"List Workspace Members","description":"List all members of a workspace.\n\nRequires workspace access or organization admin role.","operationId":"list_workspace_members_api_v1_orgs__org_id__workspaces__workspace_id__members_get","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"workspace_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Workspace Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/WorkspaceMemberResponse"},"title":"Response List Workspace Members Api V1 Orgs  Org Id  Workspaces  Workspace Id  Members Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["workspaces"],"summary":"Add Workspace Member Endpoint","description":"Add a member to the workspace.\n\nRequires workspace admin role or organization admin/owner.\nUser must already be an organization member.","operationId":"add_workspace_member_endpoint_api_v1_orgs__org_id__workspaces__workspace_id__members_post","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"workspace_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Workspace Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceMemberCreate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceMemberResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/orgs/{org_id}/workspaces/{workspace_id}/members/{member_id}":{"put":{"tags":["workspaces"],"summary":"Update Workspace Member Role Endpoint","description":"Update workspace member's role.\n\nRequires workspace admin role or organization admin/owner.","operationId":"update_workspace_member_role_endpoint_api_v1_orgs__org_id__workspaces__workspace_id__members__member_id__put","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"workspace_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Workspace Id"}},{"name":"member_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Member Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceMemberUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WorkspaceMemberResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["workspaces"],"summary":"Remove Workspace Member Endpoint","description":"Remove member from workspace.\n\nRequires workspace admin role or organization admin/owner.","operationId":"remove_workspace_member_endpoint_api_v1_orgs__org_id__workspaces__workspace_id__members__member_id__delete","security":[{"HTTPBearer":[]}],"parameters":[{"name":"org_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Org Id"}},{"name":"workspace_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Workspace Id"}},{"name":"member_id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Member Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/switch/organization":{"post":{"tags":["context"],"summary":"Switch Organization Context","description":"Switch to a different organization context.\n\nGenerates new JWT with updated organization context.\nIf workspace_id provided, also switches to that workspace.","operationId":"switch_organization_context_api_v1_switch_organization_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ContextSwitchRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ContextSwitchResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"HTTPBearer":[]}]}},"/api/v1/switch/workspace":{"post":{"tags":["context"],"summary":"Switch Workspace Context","description":"Switch to a different workspace within current organization.\n\nMaintains current organization context, updates workspace context.","operationId":"switch_workspace_context_api_v1_switch_workspace_post","security":[{"HTTPBearer":[]}],"parameters":[{"name":"workspace_id","in":"query","required":true,"schema":{"type":"string","format":"uuid","title":"Workspace Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ContextSwitchResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/v1/switch/current":{"get":{"tags":["context"],"summary":"Get Current Context","description":"Get current user's context information.\n\nReturns current organization, workspace, and permissions.\nNote: In a real implementation, this would extract context from JWT.\nFor now, we'll return the user's default organization and workspace.","operationId":"get_current_context_api_v1_switch_current_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CurrentContextResponse"}}}}},"security":[{"HTTPBearer":[]}]}},"/health":{"get":{"summary":"Health Check","description":"Health check endpoint for Docker healthcheck and monitoring","operationId":"health_check_health_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/":{"get":{"summary":"Root","description":"Root endpoint","operationId":"root__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/v1/ping":{"get":{"summary":"Ping","description":"Simple ping endpoint to test API connectivity","operationId":"ping_api_v1_ping_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/v1/status":{"get":{"summary":"Status","description":"Get API status and environment info","operationId":"status_api_v1_status_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/v1/test":{"post":{"summary":"Test Post","description":"Test POST endpoint to verify CORS is working","operationId":"test_post_api_v1_test_post","requestBody":{"content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Data"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"AuthMethodInfo":{"properties":{"provider":{"type":"string","title":"Provider","description":"Auth provider type","examples":["email","evm","solana","cosmos"]},"provider_id":{"type":"string","title":"Provider Id","description":"Provider-specific identifier (email or wallet address)"},"linked_at":{"type":"string","format":"date-time","title":"Linked At","description":"When this auth method was linked"}},"type":"object","required":["provider","provider_id","linked_at"],"title":"AuthMethodInfo","description":"Schema for authentication method information.\n\nWHY: Show user which auth methods they have linked\nHOW: Displayed in profile/settings\n\nExample:\n    {\n        \"provider\": \"email\",\n        \"provider_id\": \"alice@example.com\",\n        \"linked_at\": \"2024-01-15T10:30:00Z\"\n    }"},"ChangePasswordRequest":{"properties":{"old_password":{"type":"string","minLength":8,"title":"Old Password","description":"Current password for verification"},"new_password":{"type":"string","maxLength":128,"minLength":8,"title":"New Password","description":"New password (validated for strength in endpoint)"}},"type":"object","required":["old_password","new_password"],"title":"ChangePasswordRequest","description":"Request schema for changing password.\n\nWHY: Validate password change data\nHOW: Used in POST /auth/email/change-password\n\nRequires old password verification before setting new password.\n\nExample:\n    {\n        \"old_password\": \"SecurePass123!\",\n        \"new_password\": \"NewSecurePass456!\"\n    }"},"ContextSwitchRequest":{"properties":{"organization_id":{"type":"string","format":"uuid","title":"Organization Id","description":"Organization ID to switch to (must be member)"},"workspace_id":{"anyOf":[{"type":"string","format":"uuid"},{"type":"null"}],"title":"Workspace Id","description":"Workspace ID to switch to (optional, uses default if not provided)"}},"type":"object","required":["organization_id"],"title":"ContextSwitchRequest","description":"Schema for switching organization/workspace context.\n\nWHY: Allow users to switch between their organizations and workspaces\nHOW: Issues new JWT with updated org_id and workspace_id\n\nExample:\n    {\n        \"organization_id\": \"org-id\",\n        \"workspace_id\": \"workspace-id\"\n    }"},"ContextSwitchResponse":{"properties":{"access_token":{"type":"string","title":"Access Token","description":"New JWT access token"},"token_type":{"type":"string","title":"Token Type","description":"Token type","default":"bearer"},"organization_id":{"type":"string","format":"uuid","title":"Organization Id","description":"Current organization ID"},"workspace_id":{"type":"string","format":"uuid","title":"Workspace Id","description":"Current workspace ID"},"organization_name":{"type":"string","title":"Organization Name","description":"Current organization name"},"workspace_name":{"type":"string","title":"Workspace Name","description":"Current workspace name"},"permissions":{"additionalProperties":{"type":"boolean"},"type":"object","title":"Permissions","description":"User permissions in this context"}},"type":"object","required":["access_token","organization_id","workspace_id","organization_name","workspace_name","permissions"],"title":"ContextSwitchResponse","description":"Schema for context switch response.\n\nWHY: Return new JWT and context information\nHOW: Contains new access token with updated org/workspace context\n\nExample:\n    {\n        \"access_token\": \"new-jwt-token\",\n        \"token_type\": \"bearer\",\n        \"organization_id\": \"org-id\",\n        \"workspace_id\": \"ws-id\",\n        \"organization_name\": \"Acme Corp\",\n        \"workspace_name\": \"Engineering\"\n    }"},"CosmosLinkWalletRequest":{"properties":{"address":{"type":"string","title":"Address","description":"Wallet address to link"},"signed_message":{"type":"string","title":"Signed Message","description":"Signed challenge message"},"signature":{"type":"string","title":"Signature","description":"Wallet signature"},"public_key":{"type":"string","title":"Public Key","description":"Base64-encoded public key"}},"type":"object","required":["address","signed_message","signature","public_key"],"title":"CosmosLinkWalletRequest","description":"Request schema for linking a Cosmos wallet.\n\nWHY: Cosmos requires public key for verification\nHOW: Extends LinkWalletRequest with public_key field\n\nExample:\n    {\n        \"address\": \"cosmos1...\",\n        \"signed_message\": \"Sign this message...\",\n        \"signature\": \"bW9ja19zaWduYXR1cmU=\",\n        \"public_key\": \"Ay1hY2tfcHVibGljX2tleQ==\"\n    }"},"CosmosWalletVerifyRequest":{"properties":{"address":{"type":"string","title":"Address","description":"Wallet address that signed the message"},"signed_message":{"type":"string","title":"Signed Message","description":"The exact message that was signed"},"signature":{"type":"string","title":"Signature","description":"Signature from wallet (encoding depends on provider)"},"username":{"anyOf":[{"type":"string","maxLength":50,"minLength":3},{"type":"null"}],"title":"Username","description":"Custom username for new users (auto-generated if not provided)"},"public_key":{"type":"string","title":"Public Key","description":"Base64-encoded public key from Cosmos wallet"}},"type":"object","required":["address","signed_message","signature","public_key"],"title":"CosmosWalletVerifyRequest","description":"Request schema for Cosmos wallet signature verification.\n\nWHY: Cosmos requires public key in addition to signature\nHOW: Extends WalletVerifyRequest with public_key field\n\nUnlike EVM (which can recover pubkey from signature), Cosmos\nwallets provide the public key separately.\n\nExample:\n    {\n        \"address\": \"cosmos1...\",\n        \"signed_message\": \"Sign this message...\",\n        \"signature\": \"bW9ja19zaWduYXR1cmU=\",  # base64\n        \"public_key\": \"Ay1hY2tfcHVibGljX2tleQ==\",  # base64\n        \"username\": \"alice_cosmos\"  # optional\n    }"},"CurrentContextResponse":{"properties":{"user_id":{"type":"string","format":"uuid","title":"User Id","description":"Current user ID"},"username":{"type":"string","title":"Username","description":"Current username"},"organization_id":{"type":"string","format":"uuid","title":"Organization Id","description":"Current organization ID"},"organization_name":{"type":"string","title":"Organization Name","description":"Current organization name"},"workspace_id":{"anyOf":[{"type":"string","format":"uuid"},{"type":"null"}],"title":"Workspace Id","description":"Current workspace ID"},"workspace_name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Workspace Name","description":"Current workspace name"},"permissions":{"additionalProperties":{"type":"boolean"},"type":"object","title":"Permissions","description":"User permissions in this context"}},"type":"object","required":["user_id","username","organization_id","organization_name","permissions"],"title":"CurrentContextResponse","description":"Response for getting current user context.\n\nWHY: Shows user their current organization/workspace and permissions\nHOW: Extract context from JWT or calculate from database\n\nExample:\n    {\n        \"user_id\": \"user-id\",\n        \"username\": \"john_doe\",\n        \"organization_id\": \"org-id\",\n        \"organization_name\": \"Acme Corp\",\n        \"workspace_id\": \"ws-id\",\n        \"workspace_name\": \"Engineering\",\n        \"permissions\": {\"org:read\": true, \"chatbot:create\": true}\n    }"},"EmailLoginRequest":{"properties":{"email":{"type":"string","format":"email","title":"Email","description":"User's email address","examples":["alice@example.com"]},"password":{"type":"string","minLength":8,"title":"Password","description":"User's password","examples":["SecurePass123!"]}},"type":"object","required":["email","password"],"title":"EmailLoginRequest","description":"Request schema for email/password login.\n\nWHY: Validate login credentials\nHOW: Used in POST /auth/email/login\n\nExample:\n    {\n        \"email\": \"alice@example.com\",\n        \"password\": \"SecurePass123!\"\n    }"},"EmailSignupRequest":{"properties":{"username":{"type":"string","maxLength":50,"minLength":3,"title":"Username","description":"Desired username (must be unique)","examples":["alice_wonderland"]},"email":{"type":"string","format":"email","title":"Email","description":"User's email address","examples":["alice@example.com"]},"password":{"type":"string","maxLength":128,"minLength":8,"title":"Password","description":"Password (validated for strength in endpoint)","examples":["SecurePass123!"]}},"type":"object","required":["username","email","password"],"title":"EmailSignupRequest","description":"Request schema for email/password signup.\n\nWHY: Validate user registration data\nHOW: Used in POST /auth/email/signup\n\nValidates:\n- Username format and length\n- Email format (via EmailStr)\n- Password strength (via validate_password_strength in route)\n\nExample:\n    {\n        \"username\": \"alice_wonderland\",\n        \"email\": \"alice@example.com\",\n        \"password\": \"SecurePass123!\"\n    }"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"LinkWalletRequest":{"properties":{"address":{"type":"string","title":"Address","description":"Wallet address to link"},"signed_message":{"type":"string","title":"Signed Message","description":"Signed challenge message"},"signature":{"type":"string","title":"Signature","description":"Wallet signature"}},"type":"object","required":["address","signed_message","signature"],"title":"LinkWalletRequest","description":"Request schema for linking a wallet to existing account.\n\nWHY: Allow users to add wallet auth to email-only accounts\nHOW: Used in POST /auth/link/{provider}\n\nRequires authentication (existing JWT token) plus wallet\nsignature verification.\n\nExample:\n    {\n        \"address\": \"0x742d35Cc...\",\n        \"signed_message\": \"privexbot.com wants you to...\",\n        \"signature\": \"0xabc123...\"\n    }"},"OrganizationCreate":{"properties":{"name":{"type":"string","maxLength":255,"minLength":1,"title":"Name","description":"Organization display name","examples":["Acme Corporation"]},"billing_email":{"type":"string","format":"email","title":"Billing Email","description":"Email address for billing and subscription notifications"}},"type":"object","required":["name","billing_email"],"title":"OrganizationCreate","description":"Schema for creating a new organization.\n\nWHY: Validate organization creation data\nHOW: Creator automatically becomes owner via OrganizationMember\n\nExample:\n    {\n        \"name\": \"Acme Corporation\",\n        \"billing_email\": \"billing@acme.com\"\n    }"},"OrganizationDetailed":{"properties":{"id":{"type":"string","format":"uuid","title":"Id","description":"Organization unique identifier"},"name":{"type":"string","title":"Name","description":"Organization name"},"billing_email":{"type":"string","title":"Billing Email","description":"Billing email address"},"subscription_tier":{"type":"string","enum":["free","starter","pro","enterprise"],"title":"Subscription Tier","description":"Current subscription tier"},"subscription_status":{"type":"string","enum":["trial","active","cancelled","suspended"],"title":"Subscription Status","description":"Current subscription status"},"trial_ends_at":{"anyOf":[{"type":"string","format":"date-time"},{"type":"null"}],"title":"Trial Ends At","description":"When trial period ends (if in trial)"},"created_by":{"anyOf":[{"type":"string","format":"uuid"},{"type":"null"}],"title":"Created By","description":"User who created this organization"},"created_at":{"type":"string","format":"date-time","title":"Created At","description":"Organization creation timestamp"},"updated_at":{"type":"string","format":"date-time","title":"Updated At","description":"Last update timestamp"},"member_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Member Count","description":"Number of members in organization"},"workspace_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Workspace Count","description":"Number of workspaces in organization"},"members":{"items":{"$ref":"#/components/schemas/OrganizationMemberResponse"},"type":"array","title":"Members","description":"List of organization members"},"workspaces":{"items":{"$ref":"#/components/schemas/WorkspaceSummary"},"type":"array","title":"Workspaces","description":"List of workspaces in organization"},"settings":{"additionalProperties":true,"type":"object","title":"Settings","description":"Organization settings (branding, defaults, features)"}},"type":"object","required":["id","name","billing_email","subscription_tier","subscription_status","created_at","updated_at"],"title":"OrganizationDetailed","description":"Schema for detailed organization data including members and workspaces.\n\nWHY: Provide complete organization information\nHOW: Used in GET /organizations/{id} endpoint\n\nExample:\n    {\n        \"id\": \"org-id\",\n        \"name\": \"Acme Corporation\",\n        ...\n        \"members\": [...],\n        \"workspaces\": [...]\n    }"},"OrganizationList":{"properties":{"organizations":{"items":{"$ref":"#/components/schemas/OrganizationResponse"},"type":"array","title":"Organizations","description":"List of organizations for current page"},"total":{"type":"integer","title":"Total","description":"Total number of organizations"},"page":{"type":"integer","title":"Page","description":"Current page number (1-indexed)"},"page_size":{"type":"integer","title":"Page Size","description":"Number of organizations per page"},"total_pages":{"type":"integer","title":"Total Pages","description":"Total number of pages"},"has_next":{"type":"boolean","title":"Has Next","description":"Whether there's a next page"},"has_previous":{"type":"boolean","title":"Has Previous","description":"Whether there's a previous page"}},"type":"object","required":["organizations","total","page","page_size","total_pages","has_next","has_previous"],"title":"OrganizationList","description":"Schema for paginated organization list responses.\n\nWHY: Return multiple organizations with pagination\nHOW: Used in GET /organizations endpoint\n\nExample:\n    {\n        \"organizations\": [...],\n        \"total\": 50,\n        \"page\": 1,\n        \"page_size\": 10,\n        \"total_pages\": 5,\n        \"has_next\": true,\n        \"has_previous\": false\n    }"},"OrganizationMemberCreate":{"properties":{"user_id":{"anyOf":[{"type":"string","format":"uuid"},{"type":"null"}],"title":"User Id","description":"User ID (for existing users)"},"email":{"anyOf":[{"type":"string","format":"email"},{"type":"null"}],"title":"Email","description":"Email address (for inviting new users)"},"role":{"type":"string","enum":["owner","admin","member"],"title":"Role","description":"Role to assign to the member","default":"member"}},"type":"object","title":"OrganizationMemberCreate","description":"Schema for adding a member to an organization.\n\nWHY: Invite users to organization with specific role\nHOW: Can use user_id (existing user) or email (invite new user)\n\nExample:\n    {\n        \"user_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"role\": \"admin\"\n    }\n\nOr:\n    {\n        \"email\": \"newuser@example.com\",\n        \"role\": \"member\"\n    }"},"OrganizationMemberResponse":{"properties":{"id":{"type":"string","format":"uuid","title":"Id","description":"Membership record ID"},"user_id":{"type":"string","format":"uuid","title":"User Id","description":"User ID"},"username":{"type":"string","title":"Username","description":"User's username"},"role":{"type":"string","enum":["owner","admin","member"],"title":"Role","description":"Member's role in organization"},"invited_by":{"anyOf":[{"type":"string","format":"uuid"},{"type":"null"}],"title":"Invited By","description":"User who invited this member"},"joined_at":{"type":"string","format":"date-time","title":"Joined At","description":"When member joined organization"},"created_at":{"type":"string","format":"date-time","title":"Created At","description":"Membership creation timestamp"}},"type":"object","required":["id","user_id","username","role","joined_at","created_at"],"title":"OrganizationMemberResponse","description":"Schema for organization member data in API responses.\n\nWHY: Show member details within organization context\nHOW: Join OrganizationMember with User data\n\nExample:\n    {\n        \"id\": \"member-id\",\n        \"user_id\": \"user-id\",\n        \"username\": \"alice\",\n        \"role\": \"admin\",\n        \"joined_at\": \"2024-01-15T10:30:00Z\"\n    }"},"OrganizationMemberUpdate":{"properties":{"role":{"type":"string","enum":["owner","admin","member"],"title":"Role","description":"New role for the member"}},"type":"object","required":["role"],"title":"OrganizationMemberUpdate","description":"Schema for updating a member's role in organization.\n\nWHY: Change user's role in organization\nHOW: Only owner/admin can update roles\n\nExample:\n    {\n        \"role\": \"admin\"\n    }"},"OrganizationResponse":{"properties":{"id":{"type":"string","format":"uuid","title":"Id","description":"Organization unique identifier"},"name":{"type":"string","title":"Name","description":"Organization name"},"billing_email":{"type":"string","title":"Billing Email","description":"Billing email address"},"subscription_tier":{"type":"string","enum":["free","starter","pro","enterprise"],"title":"Subscription Tier","description":"Current subscription tier"},"subscription_status":{"type":"string","enum":["trial","active","cancelled","suspended"],"title":"Subscription Status","description":"Current subscription status"},"trial_ends_at":{"anyOf":[{"type":"string","format":"date-time"},{"type":"null"}],"title":"Trial Ends At","description":"When trial period ends (if in trial)"},"created_by":{"anyOf":[{"type":"string","format":"uuid"},{"type":"null"}],"title":"Created By","description":"User who created this organization"},"created_at":{"type":"string","format":"date-time","title":"Created At","description":"Organization creation timestamp"},"updated_at":{"type":"string","format":"date-time","title":"Updated At","description":"Last update timestamp"},"member_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Member Count","description":"Number of members in organization"},"workspace_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Workspace Count","description":"Number of workspaces in organization"}},"type":"object","required":["id","name","billing_email","subscription_tier","subscription_status","created_at","updated_at"],"title":"OrganizationResponse","description":"Schema for basic organization data in API responses.\n\nWHY: Return organization data without sensitive billing information\nHOW: Serialize Organization model to JSON\n\nExample:\n    {\n        \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"name\": \"Acme Corporation\",\n        \"subscription_tier\": \"pro\",\n        \"subscription_status\": \"active\",\n        \"created_at\": \"2024-01-15T10:30:00Z\",\n        \"updated_at\": \"2024-01-15T10:30:00Z\",\n        \"member_count\": 5,\n        \"workspace_count\": 3\n    }"},"OrganizationUpdate":{"properties":{"name":{"anyOf":[{"type":"string","maxLength":255,"minLength":1},{"type":"null"}],"title":"Name","description":"New organization name"},"billing_email":{"anyOf":[{"type":"string","format":"email"},{"type":"null"}],"title":"Billing Email","description":"New billing email address"},"settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Settings","description":"Organization settings (branding, defaults, features)"}},"type":"object","title":"OrganizationUpdate","description":"Schema for updating organization information.\n\nWHY: Allow partial updates to organization\nHOW: All fields optional - only update what's provided\n\nExample:\n    {\n        \"name\": \"New Organization Name\",\n        \"billing_email\": \"new_billing@acme.com\"\n    }"},"Token":{"properties":{"access_token":{"type":"string","title":"Access Token","description":"JWT access token","examples":["eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."]},"token_type":{"type":"string","title":"Token Type","description":"Token type (OAuth2 standard)","default":"bearer","examples":["bearer"]},"expires_in":{"type":"integer","exclusiveMinimum":0.0,"title":"Expires In","description":"Token expiration time in seconds","examples":[1800]}},"type":"object","required":["access_token","expires_in"],"title":"Token","description":"Standard OAuth2 token response.\n\nWHY: Consistent token response format across all auth endpoints\nHOW: Returned from signup/login/verify endpoints\n\nFollows OAuth2 standard for bearer tokens.\n\nExample:\n    {\n        \"access_token\": \"eyJhbGciOiJIUzI1NiIs...\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 1800\n    }"},"UserProfile":{"properties":{"username":{"type":"string","maxLength":50,"minLength":3,"title":"Username","description":"User's unique username","examples":["alice_wonderland"]},"id":{"type":"string","format":"uuid","title":"Id","description":"User's unique identifier"},"is_active":{"type":"boolean","title":"Is Active","description":"Whether user account is active"},"created_at":{"type":"string","format":"date-time","title":"Created At","description":"Account creation timestamp"},"updated_at":{"type":"string","format":"date-time","title":"Updated At","description":"Last update timestamp"},"auth_methods":{"items":{"$ref":"#/components/schemas/AuthMethodInfo"},"type":"array","title":"Auth Methods","description":"List of authentication methods linked to this account"}},"type":"object","required":["username","id","is_active","created_at","updated_at"],"title":"UserProfile","description":"Schema for detailed user profile.\n\nWHY: Provide complete user information including auth methods\nHOW: Returned from /auth/me or /users/{id} endpoints\n\nIncludes: Basic user info + linked authentication methods\n\nExample:\n    {\n        \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"username\": \"alice_wonderland\",\n        \"is_active\": true,\n        \"created_at\": \"2024-01-15T10:30:00Z\",\n        \"updated_at\": \"2024-01-15T10:30:00Z\",\n        \"auth_methods\": [\n            {\n                \"provider\": \"email\",\n                \"provider_id\": \"alice@example.com\",\n                \"linked_at\": \"2024-01-15T10:30:00Z\"\n            },\n            {\n                \"provider\": \"evm\",\n                \"provider_id\": \"0x742d35Cc...\",\n                \"linked_at\": \"2024-01-16T14:20:00Z\"\n            }\n        ]\n    }"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"},"WalletChallengeRequest":{"properties":{"address":{"type":"string","maxLength":100,"minLength":20,"title":"Address","description":"Wallet address (format depends on provider)","examples":["0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb","5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d","cosmos1hsk6jryyqjfhp5dhc55tc9jtckygx0eph6dd02"]}},"type":"object","required":["address"],"title":"WalletChallengeRequest","description":"Request schema for wallet authentication challenge.\n\nWHY: Request nonce for wallet signature verification\nHOW: Used as query parameter in GET /auth/{provider}/challenge\n\nAddress format varies by provider:\n- EVM: 0x... (42 chars hex)\n- Solana: base58 (~44 chars)\n- Cosmos: cosmos1... or secret1... (bech32)\n\nExample:\n    {\n        \"address\": \"0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb\"\n    }"},"WalletChallengeResponse":{"properties":{"message":{"type":"string","title":"Message","description":"Message to sign (includes nonce)","examples":["privexbot.com wants you to sign in with your Ethereum account:\n0x742d35Cc...\n\nNonce: abc123..."]},"nonce":{"type":"string","title":"Nonce","description":"Random nonce for replay protection","examples":["abc123def456789"]}},"type":"object","required":["message","nonce"],"title":"WalletChallengeResponse","description":"    Response schema for wallet authentication challenge.\n\n    WHY: Provide message for user to sign with their wallet\n    HOW: Returned from GET /auth/{provider}/challenge\n\n    User signs the message with their wallet, then submits\n    signature for verification.\n\n    Example:\n        {\n            \"message\": \"privexbot.com wants you to sign in...\nNonce: abc123...\",\n            \"nonce\": \"abc123def456...\"\n        }\n    "},"WalletVerifyRequest":{"properties":{"address":{"type":"string","title":"Address","description":"Wallet address that signed the message"},"signed_message":{"type":"string","title":"Signed Message","description":"The exact message that was signed"},"signature":{"type":"string","title":"Signature","description":"Signature from wallet (encoding depends on provider)"},"username":{"anyOf":[{"type":"string","maxLength":50,"minLength":3},{"type":"null"}],"title":"Username","description":"Custom username for new users (auto-generated if not provided)"}},"type":"object","required":["address","signed_message","signature"],"title":"WalletVerifyRequest","description":"Request schema for wallet signature verification.\n\nWHY: Verify wallet ownership via cryptographic signature\nHOW: Used in POST /auth/{provider}/verify\n\nContains the signed message and signature for verification.\n\nExample:\n    {\n        \"address\": \"0x742d35Cc...\",\n        \"signed_message\": \"privexbot.com wants you to...\",\n        \"signature\": \"0xabc123...\",\n        \"username\": \"alice_eth\"  # optional\n    }"},"WorkspaceCreate":{"properties":{"name":{"type":"string","maxLength":255,"minLength":1,"title":"Name","description":"Workspace display name","examples":["Engineering Team"]},"description":{"anyOf":[{"type":"string","maxLength":1000},{"type":"null"}],"title":"Description","description":"Optional workspace description"},"organization_id":{"type":"string","format":"uuid","title":"Organization Id","description":"Parent organization ID (must be member of this org)"},"is_default":{"type":"boolean","title":"Is Default","description":"Whether this is the default workspace for the organization","default":false}},"type":"object","required":["name","organization_id"],"title":"WorkspaceCreate","description":"Schema for creating a new workspace within an organization.\n\nWHY: Validate workspace creation data\nHOW: Must have organization context, user must be org member\n\nExample:\n    {\n        \"name\": \"Engineering Team\",\n        \"description\": \"Workspace for engineering chatbots\",\n        \"organization_id\": \"123e4567-e89b-12d3-a456-426614174000\"\n    }"},"WorkspaceDetailed":{"properties":{"id":{"type":"string","format":"uuid","title":"Id","description":"Workspace unique identifier"},"organization_id":{"type":"string","format":"uuid","title":"Organization Id","description":"Parent organization ID"},"name":{"type":"string","title":"Name","description":"Workspace name"},"description":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Description","description":"Workspace description"},"is_default":{"type":"boolean","title":"Is Default","description":"Whether this is the default workspace"},"created_by":{"anyOf":[{"type":"string","format":"uuid"},{"type":"null"}],"title":"Created By","description":"User who created this workspace"},"created_at":{"type":"string","format":"date-time","title":"Created At","description":"Workspace creation timestamp"},"updated_at":{"type":"string","format":"date-time","title":"Updated At","description":"Last update timestamp"},"member_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Member Count","description":"Number of members in workspace"},"members":{"items":{"$ref":"#/components/schemas/WorkspaceMemberResponse"},"type":"array","title":"Members","description":"List of workspace members"},"settings":{"additionalProperties":true,"type":"object","title":"Settings","description":"Workspace settings (theme, defaults, integrations)"}},"type":"object","required":["id","organization_id","name","is_default","created_at","updated_at"],"title":"WorkspaceDetailed","description":"Schema for detailed workspace data including members.\n\nWHY: Provide complete workspace information\nHOW: Used in GET /workspaces/{id} endpoint\n\nExample:\n    {\n        \"id\": \"ws-id\",\n        \"name\": \"Engineering Team\",\n        ...\n        \"members\": [...],\n        \"settings\": {...}\n    }"},"WorkspaceList":{"properties":{"workspaces":{"items":{"$ref":"#/components/schemas/WorkspaceResponse"},"type":"array","title":"Workspaces","description":"List of workspaces for current page"},"total":{"type":"integer","title":"Total","description":"Total number of workspaces"},"page":{"type":"integer","title":"Page","description":"Current page number (1-indexed)"},"page_size":{"type":"integer","title":"Page Size","description":"Number of workspaces per page"},"total_pages":{"type":"integer","title":"Total Pages","description":"Total number of pages"},"has_next":{"type":"boolean","title":"Has Next","description":"Whether there's a next page"},"has_previous":{"type":"boolean","title":"Has Previous","description":"Whether there's a previous page"}},"type":"object","required":["workspaces","total","page","page_size","total_pages","has_next","has_previous"],"title":"WorkspaceList","description":"Schema for paginated workspace list responses.\n\nWHY: Return multiple workspaces with pagination\nHOW: Used in GET /workspaces endpoint\n\nExample:\n    {\n        \"workspaces\": [...],\n        \"total\": 25,\n        \"page\": 1,\n        \"page_size\": 10,\n        \"total_pages\": 3,\n        \"has_next\": true,\n        \"has_previous\": false\n    }"},"WorkspaceMemberCreate":{"properties":{"user_id":{"type":"string","format":"uuid","title":"User Id","description":"User ID (must be organization member)"},"role":{"type":"string","enum":["admin","editor","viewer"],"title":"Role","description":"Role to assign in workspace (default: viewer)","default":"viewer"}},"type":"object","required":["user_id"],"title":"WorkspaceMemberCreate","description":"Schema for adding a member to a workspace.\n\nWHY: Add users to workspace with specific role\nHOW: User must already be organization member\n\nExample:\n    {\n        \"user_id\": \"user-id\",\n        \"role\": \"editor\"\n    }"},"WorkspaceMemberResponse":{"properties":{"id":{"type":"string","format":"uuid","title":"Id","description":"Membership record ID"},"user_id":{"type":"string","format":"uuid","title":"User Id","description":"User ID"},"username":{"type":"string","title":"Username","description":"User's username"},"role":{"type":"string","enum":["admin","editor","viewer"],"title":"Role","description":"Member's role in workspace"},"invited_by":{"anyOf":[{"type":"string","format":"uuid"},{"type":"null"}],"title":"Invited By","description":"User who invited this member"},"joined_at":{"type":"string","format":"date-time","title":"Joined At","description":"When member joined workspace"},"created_at":{"type":"string","format":"date-time","title":"Created At","description":"Membership creation timestamp"}},"type":"object","required":["id","user_id","username","role","joined_at","created_at"],"title":"WorkspaceMemberResponse","description":"Schema for workspace member data in API responses.\n\nWHY: Show member details within workspace context\nHOW: Join WorkspaceMember with User data\n\nExample:\n    {\n        \"id\": \"member-id\",\n        \"user_id\": \"user-id\",\n        \"username\": \"alice\",\n        \"role\": \"editor\",\n        \"joined_at\": \"2024-01-15T10:30:00Z\"\n    }"},"WorkspaceMemberUpdate":{"properties":{"role":{"type":"string","enum":["admin","editor","viewer"],"title":"Role","description":"New role for the member"}},"type":"object","required":["role"],"title":"WorkspaceMemberUpdate","description":"Schema for updating a member's role in workspace.\n\nWHY: Change user's workspace role\nHOW: Only workspace admin or org admin/owner can update roles\n\nExample:\n    {\n        \"role\": \"admin\"\n    }"},"WorkspaceResponse":{"properties":{"id":{"type":"string","format":"uuid","title":"Id","description":"Workspace unique identifier"},"organization_id":{"type":"string","format":"uuid","title":"Organization Id","description":"Parent organization ID"},"name":{"type":"string","title":"Name","description":"Workspace name"},"description":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Description","description":"Workspace description"},"is_default":{"type":"boolean","title":"Is Default","description":"Whether this is the default workspace"},"created_by":{"anyOf":[{"type":"string","format":"uuid"},{"type":"null"}],"title":"Created By","description":"User who created this workspace"},"created_at":{"type":"string","format":"date-time","title":"Created At","description":"Workspace creation timestamp"},"updated_at":{"type":"string","format":"date-time","title":"Updated At","description":"Last update timestamp"},"member_count":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Member Count","description":"Number of members in workspace"}},"type":"object","required":["id","organization_id","name","is_default","created_at","updated_at"],"title":"WorkspaceResponse","description":"Schema for basic workspace data in API responses.\n\nWHY: Return workspace data without full member/chatbot lists\nHOW: Serialize Workspace model to JSON\n\nExample:\n    {\n        \"id\": \"ws-id\",\n        \"name\": \"Engineering Team\",\n        \"organization_id\": \"org-id\",\n        \"is_default\": false,\n        \"created_at\": \"2024-01-15T10:30:00Z\",\n        \"member_count\": 5\n    }"},"WorkspaceSummary":{"properties":{"id":{"type":"string","format":"uuid","title":"Id","description":"Workspace ID"},"name":{"type":"string","title":"Name","description":"Workspace name"},"description":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Description","description":"Workspace description"},"is_default":{"type":"boolean","title":"Is Default","description":"Whether this is the default workspace"},"created_at":{"type":"string","format":"date-time","title":"Created At","description":"Workspace creation timestamp"}},"type":"object","required":["id","name","is_default","created_at"],"title":"WorkspaceSummary","description":"Schema for workspace summary in organization details.\n\nWHY: Show basic workspace info without full details\nHOW: Used in OrganizationDetailed response\n\nExample:\n    {\n        \"id\": \"ws-id\",\n        \"name\": \"Engineering\",\n        \"is_default\": true\n    }"},"WorkspaceUpdate":{"properties":{"name":{"anyOf":[{"type":"string","maxLength":255,"minLength":1},{"type":"null"}],"title":"Name","description":"New workspace name"},"description":{"anyOf":[{"type":"string","maxLength":1000},{"type":"null"}],"title":"Description","description":"New workspace description"},"settings":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Settings","description":"Workspace settings (theme, defaults, integrations)"}},"type":"object","title":"WorkspaceUpdate","description":"Schema for updating workspace information.\n\nWHY: Allow partial updates to workspace\nHOW: All fields optional - only update what's provided\n\nExample:\n    {\n        \"name\": \"New Workspace Name\",\n        \"description\": \"Updated description\"\n    }"}},"securitySchemes":{"HTTPBearer":{"type":"http","scheme":"bearer"}}}}