# Docker Compose for PrivexBot Backend - Development Environment
# Purpose: Local development with hot reload, database, and Redis
# Usage: docker compose -f docker-compose.dev.yml up

services:
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: privexbot-backend-dev
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml
      - ./uv.lock:/app/uv.lock
    env_file:
      - .env.dev
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://privexbot:privexbot_dev@postgres:5432/privexbot_dev
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - privexbot-dev
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: privexbot-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=privexbot
      - POSTGRES_PASSWORD=privexbot_dev
      - POSTGRES_DB=privexbot_dev
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U privexbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - privexbot-dev
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: privexbot-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - privexbot-dev
    restart: unless-stopped

  # Optional: Celery worker for background tasks
  # Uncomment when you create src/app/tasks/celery_worker.py
  # celery-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   container_name: privexbot-celery-dev
  #   command: celery -A src.app.tasks.celery_worker worker --loglevel=info
  #   volumes:
  #     - ./src:/app/src
  #   env_file:
  #     - .env.dev
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #     - DATABASE_URL=postgresql://privexbot:privexbot_dev@postgres:5432/privexbot_dev
  #     - REDIS_URL=redis://redis:6379/0
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - privexbot-dev
  #   restart: unless-stopped

networks:
  privexbot-dev:
    driver: bridge

volumes:
  postgres_data_dev:
  redis_data_dev:
